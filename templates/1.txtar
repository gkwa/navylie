-- .bazelrc --
common --enable_bzlmod
common --experimental_enable_bzlmod
common --lockfile_mode=off
build --symlink_prefix=dist/
query --output=label_kind
test --test_output=errors
-- BUILD.bazel --
load("@rules_go//go:def.bzl", "go_library")
load("@gazelle//:def.bzl", "gazelle")

gazelle(name = "gazelle")

gazelle(
    name = "gazelle-update-repos",
    args = [
        "-from_file=go.mod",
        "-to_macro=deps.bzl%go_dependencies",
        "-prune",
    ],
    command = "update-repos",
)

go_library(
    name = "{{ .ModuleName }}",
    srcs = ["{{ .ModuleName }}.go"],
    importpath = "github.com/taylormonacelli/{{ .ModuleName }}",
    visibility = ["//visibility:public"],
)
-- MODULE.bazel --
module(
    name = "{{ .ModuleName }}",
    repo_name = "com_github_taylormonacelli_{{ .ModuleName }}",
)

bazel_dep(name = "gazelle", version = "0.33.0")
bazel_dep(name = "rules_go", version = "0.42.0")

go_deps = use_extension("@gazelle//:extensions.bzl", "go_deps")
go_deps.from_file(go_mod = "//:go.mod")

use_repo(go_deps, "com_github_taylormonacelli_goldbug")
-- README.org --
* {{ .ModuleName }}

This is a description of my {{ .ModuleName }}.

** Usage

To use my project, run this command: ./myproject --verbose
-- cmd/BUILD.bazel --
load("@rules_go//go:def.bzl", "go_binary", "go_library")

go_library(
    name = "cmd_lib",
    srcs = ["main.go"],
    importpath = "github.com/taylormonacelli/{{ .ModuleName }}/cmd",
    visibility = ["//visibility:private"],
    deps = [
        "//:{{ .ModuleName }}",
        "@com_github_taylormonacelli_goldbug//:goldbug",
    ],
)

go_binary(
    name = "cmd",
    embed = [":cmd_lib"],
    visibility = ["//visibility:public"],
)
-- cmd/main.go --
package main

import (
	"flag"
	"log/slog"
	"os"

	"github.com/taylormonacelli/goldbug"
	"github.com/taylormonacelli/{{ .ModuleName }}"
)

var (
	verbose   bool
	logFormat string
)

func main() {
	flag.BoolVar(&verbose, "verbose", false, "Enable verbose output")
	flag.BoolVar(&verbose, "v", false, "Enable verbose output (shorthand)")

	flag.StringVar(&logFormat, "log-format", "", "Log format (text or json)")

	flag.Parse()

	if verbose || logFormat != "" {
		if logFormat == "json" {
			goldbug.SetDefaultLoggerJson(slog.LevelDebug)
		} else {
			goldbug.SetDefaultLoggerText(slog.LevelDebug)
		}
	}

	code := {{ .ModuleName }}.Main()
	os.Exit(code)
}
-- go.mod --
module github.com/taylormonacelli/{{ .ModuleName }}

go 1.21
-- {{ .ModuleName }}.code-workspace --
{
	"folders": [
		{
			"path": "."
		}
	],
	"settings": {}
}
-- {{ .ModuleName }}.go --
package {{ .ModuleName }}

import (
	"log/slog"
)

func Main() int {
	slog.Debug("{{ .ModuleName }}", "test", true)

	return 0
}
